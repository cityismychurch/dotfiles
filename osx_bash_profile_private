#!/bin/bash
vpn_string='A66D3E8E-06BB-4663-BF8C-C5E1B84311B8'
flow="summer"
export MPI_HOSTS=/etc/mpihosts
export LOCAL_INPUT_DIR="/links/kpdata/$flow/input"
export LOCAL_OUT_DIR="/links/kpdata/$flow/input"
export REM_INPUT_DIR="/home/ana/$flow"
export REM_OUT_DIR="/home/ana/$flow"
export REM_SCRIPT_DIR="/home/ana/bin"
required_spider_packages="build-essential python-dev automake cmake autoconf openssh-server libclang1 llvm gfortran libjasper-dev libjasper"
function apt_spider
{
    remote_root $1 "apt-get install $required_spider_packages"
}
export spiders=$research/spiders
alias spiders="cd $spiders"
alias list_machines='echo ${machines[*]}'
machines_ip=([1]=141.212.161.195 [2]=141.212.161.39 [3]=141.212.161.198 [4]=141.212.161.197 [5]=141.212.161.69 )
machines=( [1]=brannigan [2]=clockmaker [3]=lascaille [4]=mademoiselle [5]=sylveste)
alias research='cd $research'
alias bcode='cd $biz/code'
alias code='cd $research/code'
alias benchmarks='cd ~/drive/benchmarks'
alias music='cd ~/Dropbox/music'
alias repl='cd ~/bin/repl'
alias music='cd ~/Dropbox/music'
alias external='cd $external'
alias ners546='cd ~/Dropbox/documents/NERS546/'
alias ners551='cd ~/Dropbox/documents/NERS551/'
alias ners561='cd ~/Dropbox/documents/NERS561/'
alias ners544='cd ~/Dropbox/documents/NERS544/'
alias larger='cd $larger'
alias dface='cd $dface'
alias panoply='cd $panoply'
function soundcloud() {
scdl -l $1 $2
}
function remote_lastlog
{
    remote_root $1  "lastlog | grep 0400"
}
function remote_lastlogs
{
    remote_all_root  "lastlog | grep 0400"
}
function auth_break
{
    ssh root@${machines[$1]} "grep BREAK /var/log/auth.log"
}
function auth_break_ip
{
    ssh root@${machines[$1]} 'grep BREAK /var/log/auth.log | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | uniq'
}
function auth_break_ip_all
{
    tmp=$(mktemp)
    for index in 1 2 3 4 5
    do
        auth_break_ip $index >> $tmp
    done
    cat $tmp | sort -n
}
function ban_all_file
{
    old_ban_list="$HOME/.config/spiders/ban_list"
    ban_list=$1
    for ip in $(extra_lines $old_ban_list $ban_list)
    do
        kickban $ip
    done
    cat $1 | sort -n >> $old_ban_list
}
function ban_all_old
{
    ban_list=" $HOME/.config/spiders/ban_list"
    for ip in $(cat $ban_list)
    do
        kickban $ip
    done
    auth_break_ip_all >> $ban_list
}
function ban_all_new
{
    tmp=$(mktemp)
    auth_break_ip_all >> $tmp
    ban_list=" $HOME/.config/spiders/ban_list"
    for ip in $(extra_lines $ban_list $tmp)
    do
        kickban $ip
    done
    extra_lines $ban_list $tmp >> $ban_list
}
function mount_nfs
{
    send_ip
    remote_all "/home/ana/bin/mountnfs"
}

function umount_nfs
{
    send_ip
    remote_all "/home/ana/bin/umountnfs"
}
alias remoteconfig='scpallr ~/bin/repl/config/. "~/"'
function send_ip
{
    myvpnip=`ifconfig | grep -oE '141.((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){2}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])' | head -1`
    echo $myvpnip
    remote_all "echo $myvpnip > /home/ana/masterip" 2>/dev/null
    remote_all 'echo $MACHINE_ID: $masterip' 2>/dev/null
}
function update_spiders
{
    remote_all_root "apt-get update && apt-get upgrade"
}
function remote_all
{
    for index in {1..5}
    do
        remote $index "$1"
    done
}
function remote_all_root
{
    for index in 1 2 3 4 5
    do
        remote_root $index "$1"
    done
}
alias r1='remote 1'
alias r2='remote 2'
alias r3='remote 3'
alias r4='remote 4'
alias r5='remote 5'
alias rr1='remote_root 1'
alias rr2='remote_root 2'
alias rr3='remote_root 3'
alias rr4='remote_root 4'
alias rr5='remote_root 5'
alias temps='remote_all "sensors"'
alias mybuilds.ShiftIt='cd $HOME/git/ShiftIt/ShiftIt/ && xcodebuild -target ShiftIt -configuration Release'
export biz=$HOME/Dropbox/business
export documents=$HOME/Dropbox/documents
alias docs='cd $documents'
alias documents='cd $documents'
function key
{
    echo -n Password:
    read -s -e password
    key=`echo $password | awk '{$1=$1}1' | shasum -a 256 | grep -oE '[a-zA-Z0-9]*' | awk '{$1=$1}1'`
    counter=1
    while [ $counter -lt $1 ]; do
        key=`echo $key | shasum -a 256 | grep -oE '[a-zA-Z0-9]*' | awk '{$1=$1}1'`
        let counter=counter+1
    done
    echo $key | awk '{$1=$1}1' | pbcopy
    echo "copy complete"
}
function getmarsprogress ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "cd $flow/$1 && $REM_SCRIPT_DIR/marsprogress"
    done
}
function putmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "mkdir $REM_INPUT_DIR/$1 &2>/dev/null"
        scp $LOCAL_INPUT_DIR/pkg-$1-$i.tar.gz ana@${machines[$i]}:$REM_INPUT_DIR/$1/
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR/$1 && tar xvf pkg*"
    done
}
function putrunmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "mkdir $REM_INPUT_DIR/$1 &2>/dev/null"
        scp $LOCAL_INPUT_DIR/pkg-$1-$i.tar.gz ana@${machines[$i]}:$REM_INPUT_DIR/$1/
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR/$1 && tar xvf pkg*"
        ssh ana@${machines[$i]} "screen -r -p 0 -X stuff \"cd $REM_INPUT_DIR/$1 && marsdirs^M\""
    done
}
function getmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR && $REM_SCRIPT_DIR/packcsv $1"
        scp ana@${machines[$i]}:$REM_INPUT_DIR/out-$1-$i.tar.gz .
    done
}
function checkmars ()
{
    remote $1 "ps aux | sort -rk 3,3 | head -n 9 | grep mars";
}
function runmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "screen -r -p 0 -X stuff \"cd $REM_INPUT_DIR/$1 && marsdirs^M\""
    done
}
function getflux()
{
    scp weeksma@flux-xfer.arc-ts.umich.edu:/home/weeksma/$1 $2
}
function putflux()
{
    scp "${1}" weeksma@flux-xfer.arc-ts.umich.edu:/home/weeksma/$2
}
source ~/.iterm2_shell_integration.`basename $SHELL`
function web
{
    scp "$@" root@mademoiselle:/opt/nginx/html/
}
function kickban()
{
    remote_all_root "iptables -I INPUT 2 -s $1 -j DROP" &>/dev/null && \
        echo "dropped $1" || echo "bt... $1"
}
alias flux='ssh weeksma@flux-login.arc-ts.umich.edu'
function getwan() { scp ana@dreamfuelwan:/home/ana/src/neural-style/$1 . ; }
function putwan() { scp $1 ana@dreamfuelwan:/home/ana/src/neural-style/ ; }
function getfuel() { scp ana@dreamfuel:/home/ana/src/neural-style/$1 . ; }
function putfuel() { scp $1 ana@dreamfuel:/home/ana/src/neural-style/ ; }
function getns() { scp ana@${machines[$1]}:/home/ana/src/neural-style/$2 .;}
function putns() { scp $2 ana@${machines[$1]}:/home/ana/src/neural-style/ ;}
function getnsi() { scp ana@${machines[$1]}:/home/ana/src/neural-style/$2_$3.png . ;}
function remote_parallel_root()
{
    parallel --tag --nonall -S $( IFS=','; echo "root@${machines[*]}" ) $1
}
function remote_parallel()
{
    parallel --tag --nonall -S $( IFS=','; echo "${machines[*]}" ) $1
}
function remote_clone()
{
    remote_parallel "cd src && if [ ! -d "$2" ]; then git clone https://github.com/$1/$2.git; else cd $2; git pull; fi"
}
function update_all()
{
    remote_all_root "apt-get update"
}
function install_all()
{
    remote_all_root "apt-get update && apt-get install \"$@\""
}
function install_all_noupdate()
{
    remote_all_root "apt-get install ""$@"""
}
