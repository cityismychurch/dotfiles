#!/bin/bash
function spotlight_rebuild()
{
    sudo mdutil -E $1
}
function github()
{
    git clone git@github.com:$1.git
}
alias wcat="watch cat \"${@}\""
function remote_parallel_root()
{
    parallel --tag --nonall -S $( IFS=','; echo "root@${machines[*]}" ) $1
}
function remote_parallel()
{
    parallel --tag --nonall -S $( IFS=','; echo "${machines[*]}" ) $1
}
function remote_clone()
{
    remote_parallel "cd src && if [ ! -d "$2" ]; then git clone https://github.com/$1/$2.git; else cd $2; git pull; fi"
}
function update_all()
{
    remote_all_root "apt-get update"
}
function install_all()
{
    remote_all_root "apt-get update && apt-get install \"$@\""
}
function install_all_noupdate()
{
    remote_all_root "apt-get install ""$@"""
}
export PYTHONPATH=$HOME/code/python:$HOME/src/python:$PYTHONPATH
alias df="df -h $@"
source ~/.profile
alias unpackall="find . -name \"*.tar.gz\" -exec tar xvf {} \;"
function getproject() { scp ana@brannigan:/home/ana/NERS547/project/$1 . ; }
function getwan() { scp ana@dreamfuelwan:/home/ana/src/neural-style/$1 . ; }
function putwan() { scp $1 ana@dreamfuelwan:/home/ana/src/neural-style/ ; }
function getfuel() { scp ana@dreamfuel:/home/ana/src/neural-style/$1 . ; }
function putfuel() { scp $1 ana@dreamfuel:/home/ana/src/neural-style/ ; }
function getns() { scp ana@${machines[$1]}:/home/ana/src/neural-style/$2 .;}
function putns() { scp $2 ana@${machines[$1]}:/home/ana/src/neural-style/ ;}
function getnsi() { scp ana@${machines[$1]}:/home/ana/src/neural-style/$2_$3.png . ;}
alias dud='du -h -d $1'
alias flux='ssh weeksma@flux-login.arc-ts.umich.edu'
#function marsprogress ()
#{
#    for i in `seq 1 5`; do
#        ssh ana@${machines[$i]} "cd $1 && python -c \"print \"%.2f\" % (`checkmarsdone`.0 / `checkmarstotal`.0)\""
#    done
#}
flow="summer"
export LOCAL_INPUT_DIR="/links/kpdata/$flow/input"
export LOCAL_OUT_DIR="/links/kpdata/$flow/input"
export REM_INPUT_DIR="/home/ana/$flow"
export REM_OUT_DIR="/home/ana/$flow"
export REM_SCRIPT_DIR="/home/ana/bin"
function getmarsprogress ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "cd $flow/$1 && $REM_SCRIPT_DIR/marsprogress"
    done
}
function putmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "mkdir $REM_INPUT_DIR/$1 &2>/dev/null"
        scp $LOCAL_INPUT_DIR/pkg-$1-$i.tar.gz ana@${machines[$i]}:$REM_INPUT_DIR/$1/
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR/$1 && tar xvf pkg*"
    done
}
function putrunmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "mkdir $REM_INPUT_DIR/$1 &2>/dev/null"
        scp $LOCAL_INPUT_DIR/pkg-$1-$i.tar.gz ana@${machines[$i]}:$REM_INPUT_DIR/$1/
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR/$1 && tar xvf pkg*"
        ssh ana@${machines[$i]} "screen -r -p 0 -X stuff \"cd $REM_INPUT_DIR/$1 && marsdirs^M\""
    done
}
function getmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "cd $REM_INPUT_DIR && $REM_SCRIPT_DIR/packcsv $1"
        scp ana@${machines[$i]}:$REM_INPUT_DIR/out-$1-$i.tar.gz .
    done
}
function checkmars ()
{
    remote $1 "ps aux | sort -rk 3,3 | head -n 9 | grep mars";
}
function runmars ()
{
    for i in `seq 1 5`; do
        ssh ana@${machines[$i]} "screen -r -p 0 -X stuff \"cd $REM_INPUT_DIR/$1 && marsdirs^M\""
    done
}
function getflux()
{
    scp weeksma@flux-xfer.arc-ts.umich.edu:/home/weeksma/$1 $2
}
function putflux()
{
    scp "${1}" weeksma@flux-xfer.arc-ts.umich.edu:/home/weeksma/$2
}
source ~/.iterm2_shell_integration.`basename $SHELL`
function web
{
    scp "$@" root@mademoiselle:/opt/nginx/html/
}
function kickban()
{
    remote_all_root "iptables -I INPUT 2 -s $1 -j DROP" &>/dev/null && \
        echo "dropped $1" || echo "bt... $1"
}
###############
# vpn         #
###############
alias vpn-connect='scutil --nc start A66D3E8E-06BB-4663-BF8C-C5E1B84311B8'
alias vpn-disconnect='scutil --nc stop A66D3E8E-06BB-4663-BF8C-C5E1B84311B8'

###############
# local       #
###############
export PAGER="/bin/sh -c \"unset PAGER;col -b -x | \
        vim -R -c 'set ft=man nomod nolist' -c 'map q :q<CR>' \
            -c 'map <SPACE> <C-D>' -c 'map b <C-U>' \
                -c 'nmap K :Man <C-R>=expand(\\\"<cword>\\\")<CR><CR>' -\""
function key
{
    echo -n Password:
    read -s -e password
    key=`echo $password | awk '{$1=$1}1' | shasum -a 256 | grep -oE '[a-zA-Z0-9]*' | awk '{$1=$1}1'`
    counter=1
    while [ $counter -lt $1 ]; do
        key=`echo $key | shasum -a 256 | grep -oE '[a-zA-Z0-9]*' | awk '{$1=$1}1'`
        let counter=counter+1
    done
    echo $key | awk '{$1=$1}1' | pbcopy
    echo "copy complete"
}
alias ejectusb='diskutil eject `diskutil list | grep external | grep -oE "/dev/disk[0-9]"`'
alias df='df -h'
alias du='du -h'
function myupdate
{
    softwareupdate -i -a
    brew update && brew upgrade
}
export biz=$HOME/Dropbox/business
export documents=$HOME/Dropbox/documents
alias docs='cd $documents'
alias documents='cd $documents'
alias gpp='g++ $@'
alias vim='/usr/local/bin/vim $@'
alias anon='export HISTFILE=/dev/null'
alias mybuilds.ShiftIt='cd $HOME/git/ShiftIt/ShiftIt/ && xcodebuild -target ShiftIt -configuration Release'

alias r='reset'
alias lsv='ls *.{mp4,avi,mkv} 2>/dev/null'
alias lsi='ls *.{png,jpg,jpeg,gif,bmp} 2>/dev/null'
alias matlab.console='matlab -nodesktop'
alias matlab.clean='matlab -nodesktop -nojvm'

HISTCONTROL=ignoreboth

###############
# programming #
###############
alias krindent='indent -kr -i8 ${@}'
export MPI_HOSTS=/etc/mpihosts

###############
# spiders     #
###############
alias temps='remote_all "sensors"'
function update_spiders
{
    remote_all_root "apt-get update && apt-get upgrade"
}
function extra_lines
{
    tmp1="$(mktemp)"
    tmp2="$(mktemp)"
    sort <$1 >$tmp1
    sort <$2 >$tmp2
    comm -13 $tmp1 $tmp2
}
required_spider_packages="build-essential python-dev automake cmake autoconf openssh-server libclang1 llvm gfortran libjasper-dev libjasper"
function apt_spider
{
    remote_root $1 "apt-get install $required_spider_packages"
}
export spiders=$research/spiders
alias spiders="cd $spiders"
alias list_machines='echo ${machines[*]}'
machines_ip=([1]=141.212.161.195 [2]=141.212.161.39 [3]=141.212.161.198 [4]=141.212.161.197 [5]=141.212.161.69 )
machines=( [1]=brannigan [2]=clockmaker [3]=lascaille [4]=mademoiselle [5]=sylveste)
function send_ip
{
    myvpnip=`ifconfig | grep -oE '141.((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){2}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])' | head -1`
    echo $myvpnip
    remote_all "echo $myvpnip > /home/ana/masterip" 2>/dev/null
    remote_all 'echo $MACHINE_ID: $masterip' 2>/dev/null
}
function remote
{
    USAGE="Usage: remote [machine id's] command"

    if [ "$#" -lt 2 ]; then
        echo $USAGE
        return 1
    fi

    while (( "$#" - 1 )); do
        ssh -t "ana@${machines[${1}]}" "${@: -1}"
        shift
    done
}
function remote_root
{
    USAGE="Usage: remote [machine id's] command"

    if [ "$#" -lt 2 ]; then
        echo $USAGE
        return 1
    fi

    while (( "$#" - 1 )); do
        ssh -t "root@${machines[${1}]}" "${@: -1}"
        shift
    done
}
function remote_all
{
    for index in {1..5}
    do
        remote $index "$1"
    done
}
function remote_all_root
{
    for index in 1 2 3 4 5
    do
        remote_root $index "$1"
    done
}
alias r1='remote 1'
alias r2='remote 2'
alias r3='remote 3'
alias r4='remote 4'
alias r5='remote 5'
alias rr1='remote_root 1'
alias rr2='remote_root 2'
alias rr3='remote_root 3'
alias rr4='remote_root 4'
alias rr5='remote_root 5'
function remote_lastlog
{
    remote_root $1  "lastlog | grep 0400"
}
function remote_lastlogs
{
    remote_all_root  "lastlog | grep 0400"
}
function auth_break
{
    ssh root@${machines[$1]} "grep BREAK /var/log/auth.log"
}
function auth_break_ip
{
    ssh root@${machines[$1]} 'grep BREAK /var/log/auth.log | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | uniq'
}
function auth_break_ip_all
{
    tmp=$(mktemp)
    for index in 1 2 3 4 5
    do
        auth_break_ip $index >> $tmp
    done
    cat $tmp | sort -n
}
function ban_all_file
{
    old_ban_list="$HOME/.config/spiders/ban_list"
    ban_list=$1
    for ip in $(extra_lines $old_ban_list $ban_list)
    do
        kickban $ip
    done
    cat $1 | sort -n >> $old_ban_list
}
function ban_all_old
{
    ban_list=" $HOME/.config/spiders/ban_list"
    for ip in $(cat $ban_list)
    do
        kickban $ip
    done
    auth_break_ip_all >> $ban_list
}
function ban_all_new
{
    tmp=$(mktemp)
    auth_break_ip_all >> $tmp
    ban_list=" $HOME/.config/spiders/ban_list"
    for ip in $(extra_lines $ban_list $tmp)
    do
        kickban $ip
    done
    extra_lines $ban_list $tmp >> $ban_list
}
function mount_nfs
{
    send_ip
    remote_all "/home/ana/bin/mountnfs"
}

function umount_nfs
{
    send_ip
    remote_all "/home/ana/bin/umountnfs"
}
alias remoteconfig='scpallr ~/bin/repl/config/. "~/"'

# docker stuff
alias dockerize='boot2docker start'
alias dockerinit='$(boot2docker shellinit)'
alias builder='docker run -it -v $HOME/docker:/root cityismychurch/builder'


# powerline bindings
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
. $repository_root/lib/python/site-packages/powerline/bindings/bash/powerline.sh

function soundcloud() {
scdl -l $1 $2
}

function youtube() {
pushd .
cd $downloads
youtube-dl -x --no-check-certificate $1 --audio-format mp3
popd
}

function pid_for_name() {
#  ps -A | grep -m2 $1 | tail -1 | awk '{print $1}'
ps -A | grep $1 | awk '{print $1}'
}
function pause_af {
kill -17 $(pid_for_name afplay)
}
function play_af {
kill -19 $(pid_for_name afplay)
}

function apl(){ killall afplay >/dev/null; afplay "$1" & }

function lsfirst(){ ls | grep -i $1 | head -1; }

function findfirst(){ find . | grep -i $1 | head -1; }

function findfirstd(){ find $1 | grep -i $2 | head -1; }

function findnth(){ find . | grep -i $1 | sed "$2q;d" ; }

function findnthd(){ find $1 | grep -i $2 | sed "$3q;d" ; }

function m(){ killall afplay >/dev/null; afplay "$(findfirstd $music $1)" & }

function mm(){ killall afplay >/dev/null; afplay "$(findnthd $music $1 $2)" &}

function aplsns(){
IFS=$' ';
for n in $2; do
    aplsn $1 $2;
    wait %1;
done;
} 

function lsm(){ lsn $music $1; }

function km(){ killall afplay; }

function lsn(){
IFS=$'\n';
let i=1;
for file in `find $1 | grep -i "$2"`; do
    echo "$i $file $i";
    let i+=1;
done;
}

# aliases
alias src='cd $HOME/src'
alias larger='cd $larger'
alias dface='cd $dface'
alias panoply='cd $panoply'
alias recent='ls -tr "$@"'
alias xcode='cd $xcodebuild'
alias library='cd $library'
alias external='cd $external'
alias ners546='cd ~/Dropbox/documents/NERS546/'
alias ners551='cd ~/Dropbox/documents/NERS551/'
alias ners561='cd ~/Dropbox/documents/NERS561/'
alias ners544='cd ~/Dropbox/documents/NERS544/'
alias music='cd ~/Dropbox/music'
alias repl='cd ~/bin/repl'
alias music='cd ~/Dropbox/music'
alias downloads='cd $downloads'
alias editprofile='vim ~/.bash_profile'
alias editmachineprofile='vim ~/.machine_bash_profile'
alias reprofile='source ~/.bash_profile'
alias research='cd $research'
alias bcode='cd $biz/code'
alias code='cd $research/code'
alias benchmarks='cd ~/drive/benchmarks'

# removed \h to remove clutter for benchmark directories
export PS1="\! [\D{%m/%d/%H:%M:%S}] <\u> "

export LSCOLORS=Dxfxcxdxbxegedabagacad
alias ls='ls -hG $@'
alias lsdr='ls -hGtr $@'
alias lsd='ls -hGt $@'
alias lldr='ls -lhGtr $@'
alias lld='ls -lhGt $@'
alias ll='ls -lhG $@'
alias la='ls -AhG $@'
alias l='ls -CFhG $@'

# from http://natelandau.com/my-mac-osx-bash_profile/
export BLOCKSIZE=1k
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels
alias f='open -a Finder ./'                 # f:            Opens current directory in MacOS Finder
alias ~="cd ~"                              # ~:            Go Home
mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview
#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.             Example: mans mplayer codec
#   --------------------------------------------------------------------
mans () {
    man $1 | grep -iC2 --color=always $2 | less
}
#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ------------------------------------------------------
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
    tell application "Finder"
    try
    set currFolder to (folder of the front window as alias)
    on error
    set currFolder to (path to desktop folder as alias)
end try
POSIX path of currFolder
            end tell
            EOT
            )
            echo "cd to \"$currFolderPath\""
            cd "$currFolderPath"
        }
        #   extract:  Extract most know archives with one command
        #   ---------------------------------------------------------
        extract () {
            if [ -f $1 ] ; then
                case $1 in
                    *.tar.bz2)   tar xjf $1     ;;
                    *.tar.gz)    tar xzf $1     ;;
                    *.bz2)       bunzip2 $1     ;;
                    *.rar)       unrar e $1     ;;
                    *.gz)        gunzip $1      ;;
                    *.tar)       tar xf $1      ;;
                    *.tbz2)      tar xjf $1     ;;
                    *.tgz)       tar xzf $1     ;;
                    *.zip)       unzip $1       ;;
                    *.Z)         uncompress $1  ;;
                    *.7z)        7z x $1        ;;
                    *)     echo "'$1' cannot be extracted via extract()" ;;
                esac
            else
                echo "'$1' is not a valid file"
            fi
        }
        alias qfind="find . -name "                 # qfind:    Quickly search for file
        ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
        ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
        ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string
        #   spotlight: Search for a file using MacOS Spotlight's metadata
        #   -----------------------------------------------------------
        spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


test -e ${HOME}/.iterm2_shell_integration.bash && source ${HOME}/.iterm2_shell_integration.bash
export PATH="/usr/local/sbin:$PATH"

# added by Miniconda3 3.19.0 installer
export PATH="/Users/case/bin/miniconda3/bin:$PATH"

# added by Anaconda2 4.1.1 installer
export PATH="/Users/case/.conda/bin:$PATH"
